{"version":3,"sources":["components/Navbar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","score","topScore","react_default","a","createElement","NavBar","NavBarContainer","NavBarItem","styled","h3","_templateObject","div","_templateObject2","_templateObject3","Card","_this$props","this","id","handleClick","background","CardStyle","style","backgroundImage","concat","onClick","Component","Card_templateObject","App","state","cards","name","clicked","card","_this","returnCard","checkCardStatus","find","resetScore","clickCard","addScore","updatedCards","Object","toConsumableArray","indexOfCard","indexOf","setState","resetCards","map","objectSpread","shuffledCards","shuffle","_this$state","array","i","length","j","Math","floor","random","_ref","_this2","_this$state2","className","components_Navbar","CardContainer","components_Card","key","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fd5572e.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Navbar = props => {\r\n  const { score, topScore } = props\r\n  return (\r\n    <NavBar>\r\n      <NavBarContainer>\r\n        <NavBarItem>Clicky Game</NavBarItem>\r\n        <NavBarItem>Click an image to begin!</NavBarItem>\r\n        <NavBarItem>\r\n          Score: {score} | Top Score: {topScore}\r\n        </NavBarItem>\r\n      </NavBarContainer>\r\n    </NavBar>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n\r\nconst NavBarItem = styled.h3`\r\n  color: white;\r\n`\r\n\r\nconst NavBarContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  height: 60px;\r\n  background-color: #24292e;\r\n`\r\n\r\nconst NavBar = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    const { id, handleClick, background } = this.props\r\n    return (\r\n      <CardStyle\r\n        style={{ backgroundImage: `url(${background})` }}\r\n        onClick={() => handleClick(id)}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card\r\n\r\nconst CardStyle = styled.div`\r\n  width: auto;\r\n  height: 0;\r\n  padding-bottom: 100%;\r\n  cursor: pointer;\r\n  transition: transform 0.2s;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  :hover {\r\n    transform: scale(1.1);\r\n  }\r\n`\r\n","import React, { Component } from 'react'\nimport Navbar from './components/Navbar'\nimport Card from './components/Card'\nimport styled from 'styled-components'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    cards: [\n      {\n        id: 1,\n        name: 'Mario',\n        clicked: false,\n        background: 'https://i.imgur.com/BMKlWox.png'\n      },\n      {\n        id: 2,\n        name: 'Yoshi',\n        clicked: false,\n        background: 'https://i.imgur.com/uiR2unW.png'\n      },\n      {\n        id: 3,\n        name: 'DK',\n        clicked: false,\n        background: 'https://i.imgur.com/XbM6fpi.png'\n      },\n      {\n        id: 4,\n        name: 'Kirby',\n        clicked: false,\n        background: 'https://i.imgur.com/VvgrXVM.png'\n      },\n      {\n        id: 5,\n        name: 'Link',\n        clicked: false,\n        background: 'https://i.imgur.com/otQD5aA.png'\n      },\n      {\n        id: 6,\n        name: 'Fox',\n        clicked: false,\n        background: 'https://i.imgur.com/iGRHG0E.png'\n      },\n      {\n        id: 7,\n        name: 'Samus',\n        clicked: false,\n        background: 'https://i.imgur.com/zUuNytA.png'\n      },\n      {\n        id: 8,\n        name: 'Pikachu',\n        clicked: false,\n        background: 'https://i.imgur.com/vkt4QdQ.png'\n      },\n      {\n        id: 9,\n        name: 'Luigi',\n        clicked: false,\n        background: 'https://i.imgur.com/VZFgeI7.png'\n      },\n      {\n        id: 10,\n        name: 'Ness',\n        clicked: false,\n        background: 'https://i.imgur.com/FIwD0Kw.png'\n      },\n      {\n        id: 11,\n        name: 'C.Falcon',\n        clicked: false,\n        background: 'https://i.imgur.com/qCB6gQo.png'\n      },\n      {\n        id: 12,\n        name: 'Jigglypuff',\n        clicked: false,\n        background: 'https://i.imgur.com/p6qO4bB.png'\n      }\n    ]\n  }\n\n  handleClick = id => {\n    const card = this.returnCard(id)\n    this.checkCardStatus(card)\n  }\n\n  returnCard = id => this.state.cards.find(card => card.id === id)\n\n  checkCardStatus = card => {\n    if (card.clicked === true) {\n      this.resetScore()\n    } else {\n      this.clickCard(card)\n      this.addScore()\n    }\n  }\n\n  clickCard = card => {\n    const { cards } = this.state\n    let updatedCards = [...cards]\n    const indexOfCard = updatedCards.indexOf(card)\n\n    updatedCards[indexOfCard].clicked = true\n\n    this.setState({\n      cards: updatedCards\n    })\n  }\n\n  resetScore = () => {\n    const resetCards = this.state.cards.map(card => {\n      const resetCard = { ...card, clicked: false }\n      return resetCard\n    })\n\n    const shuffledCards = this.shuffle(resetCards)\n\n    this.setState({\n      score: 0,\n      cards: shuffledCards\n    })\n  }\n\n  addScore = () => {\n    const { score, topScore, cards } = this.state\n    const shuffledCards = this.shuffle(cards)\n    if (score >= topScore) {\n      this.setState({\n        score: score + 1,\n        topScore: score + 1,\n        cards: shuffledCards\n      })\n    } else {\n      this.setState({\n        score: score + 1,\n        cards: shuffledCards\n      })\n    }\n  }\n\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1))\n      ;[array[i], array[j]] = [array[j], array[i]]\n    }\n    return array\n  }\n\n  render() {\n    const { score, topScore, cards } = this.state\n    return (\n      <div className=\"App\">\n        <Navbar score={score} topScore={topScore} />\n        <CardContainer>\n          {cards.map(card => (\n            <Card\n              key={card.id}\n              id={card.id}\n              name={card.name}\n              background={card.background}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </CardContainer>\n      </div>\n    )\n  }\n}\n\nexport default App\n\nconst CardContainer = styled.div`\n  position: relative;\n  top: 75px;\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 1rem;\n  width: 960px;\n  margin: 0 auto;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}